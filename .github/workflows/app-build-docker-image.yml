# Copyright (c) 2022 Robert Bosch GmbH and Microsoft Corporation
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Build Docker Image for single arch

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      language:
        required: true
        type: string
      multiarch:
        required: false
        type: boolean
        default: false
      appExecutionPlatforms:
        required: true
        type: string
      appName:
        required: true
        type: string
      appDockerfilePath:
        required: true
        type: string
    outputs:
      imageid:
        value: ${{ jobs.build-image.outputs.imageid }}
      imagedigest:
        value: ${{ jobs.build-image.outputs.digest }}

jobs:
  build-image:
    name: "Building image (${{ inputs.appName }})"
    runs-on: ubuntu-latest
    container: ghcr.io/eclipse-velocitas/devcontainer-base-images/${{ inputs.language }}:latest
    outputs:
      imageid: ${{ steps.image_build.outputs.imageid }}
      imagedigest: ${{ steps.image_build.outputs.imagedigest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v3
        with:
          repository: eclipse-velocitas/release-documentation-action
          path: "./.github/actions"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.0

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload. This supports repository names in mixed case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://user:${{ secrets.GITHUB_TOKEN }}@github.com/

      - name: Init velocitas project
        run: |
          velocitas init

      - name: Setup git config
        shell: bash
        run: |
          git config --global user.email "github-automation@users.noreply.github.com"
          git config --global user.name "Github Automation"

      - name: Set Platform(s) String
        id: set_platforms
        run: |
          if [ ${{ inputs.multiarch }} == true ]; then
            echo "Build Multiarch"
            echo "platforms=${{ inputs.appExecutionPlatforms }}" >> $GITHUB_OUTPUT
          else
            echo "Build ${{inputs.platform}}"
            echo "platforms=linux/${{ inputs.platform }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: "${{ inputs.appName }} -- Build image"
        id: image_build
        uses: docker/build-push-action@v3.2.0
        with:
          pull: true
          push: false
          outputs: |
            type=oci,dest=./${{ inputs.appName }}.tar
          file: ${{ inputs.appDockerfilePath }}
          context: .
          platforms: ${{ steps.set_platforms.outputs.platforms }}
          secrets: |
            "github_token=user:${{ secrets.GITHUB_TOKEN }}"
          tags: ${{ github.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{steps.github-repository-name-case-adjusted.outputs.lowercase}}

      - name: "Install skopeo"
        run: |
          sudo apt-get update
          sudo apt-get -y install skopeo

      - name: "${{ inputs.appName }} -- Inspect tar image with skopeo"
        run: |
          skopeo inspect --raw oci-archive:${{ inputs.appName }}.tar | jq
          skopeo inspect oci-archive:${{ inputs.appName }}.tar
          skopeo copy oci-archive:${{ inputs.appName }}.tar docker-archive:${{ inputs.appName }}-arch.tar

      - name: Checkout Github Integration
        uses: actions/checkout@v3
        with:
          repository: eclipse-velocitas/devenv-github-workflows
          path: ./.github/devenv-github-workflows

      - name: "${{ inputs.appName }} -- Scan docker image for vulnerabilities"
        uses: aquasecurity/trivy-action@0.8.0
        with:
          input: ${{ inputs.appName }}-arch.tar
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          format: "template"
          template: .github/devenv-github-workflows/templates/junit.tpl
          output: "junit.xml"

      - name: "${{ inputs.appName }} -- Show scan results"
        if: ${{ always() }}
        run: cat ./junit.xml

      - name: "${{ inputs.appName }} -- Package vulnerability scan files"
        uses: ./.github/actions/package
        with:
          name: "VulnerabilityScan-${{ inputs.appName }}"
          type: "VulnerabilityScan"
          schema: "JUnit"
          sourcePath: ./junit.xml
          packagePath: results/Documentation/renderer

      - name: "${{ inputs.appName }} -- Upload trivy report as artifacts"
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            results/Documentation/renderer/*

      - name: "${{ inputs.appName }} -- Publish Trivy Scan Results"
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() && steps.image_build.outcome == 'success' }}
        with:
          check_name: Trivy Scan Results (${{ inputs.appName }})
          comment_title: Trivy Scan Results (${{ inputs.appName }})
          fail_on: "errors"
          junit_files: ./junit.xml

      - name: "${{ inputs.appName }} -- Upload image to artifacts"
        if: ${{ steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        env:
          VAPP_IMAGE: ${{ inputs.appName }}-${{ inputs.platform }}
        with:
          name: ${{ env.VAPP_IMAGE }}
          path: ./${{ inputs.appName }}.tar
          if-no-files-found: error

      - name: "${{ inputs.appName }} -- Upload AppManifest.json to artifacts"
        if: ${{ steps.image_build.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: AppManifest
          path: ./app/AppManifest.json
          if-no-files-found: error
